# R_Code_Link
# Aufgabe 3
# 3.1


iterationen <- 100000 # Anzahl der Simulationen
N <- 8                # Anzahl der Personen
counter <- 0          # zählt wie ob jemand sein eigenes Geschenk bekommen hat
alle_Geschenke <- 1:8 


# Simulation durchführen
for (i in 1:iterationen) {
  Verteilung <- sample(alle_Geschenke)
  kein_eigenes_Geschenk <- TRUE
  
  for ( j in 1:N) {
    if (Verteilung [j] == alle_Geschenke [j]){
      kein_eigenes_Geschenk <- FALSE
    }
  }
  if (kein_eigenes_Geschenk){
    counter <- counter +1
  }
}

Ergebnis <- counter/iterationen


#3.2

wichtel_unglück <- function(n, k, iterationen = 1000000) {
  # Überprüfen, ob Eingaben gültig sind
  if (n <= 0 || k < 0 || iterationen <= 0) {
    stop("n, k und iterationen müssen positive Zahlen sein!")
  }
  
  # Zähler für erfolgreiche Fälle
  erfolgreiche_fälle <- 0
  
  # Simulation durchführen
  for (i in 1:iterationen) {
    
    # Geschenke durchnummerieren und mischen
    verteilung <- sample(1:n)
    
    # Zähler einbauen
    eigene_geschenke <- sum(verteilung == 1:n)
    
    # Überprüfe, ob höchstens k Personen ihr eigenes Geschenk erhalten
    if (eigene_geschenke <= k) {
    
        erfolgreiche_fälle <- erfolgreiche_fälle + 1
    }
  }
}
  # Wahrscheinlichkeit berechnen
  return(erfolgreiche_fälle / iterationen)
  

  
#Aufgabe 3.4
  
libary("test_that")
  
testthat("Wichtel_unglück_korrekt",{
    
    #1 Testfall es dürfen keine negativen Zahlen für n zugelassen werden
    expect_error(wichtel_unglueck(-5, 10), "Zahlen sollten positiv sein")
    
    # 2. Testfall, für n=1 muss k=1 gibt die Wahrscheinlichkeit 1
    expect_equal(wichtel_unglück(1, 1, 10000), 1)    
    
    # 3. Testfall, bei k=0 müss n ziemlich groß sein
    result <- wichtel_unglueck(100, 0, 10000)
    expect_true(result > 0.36, result < 0.38)
    
    # 4. Testfall, bei n=2 und k=0 ist die einzige Möglichkeit,dass jeder ein 
    # anderes Geschenk erhält nur der Tausch
    expect_equal(wichtel_unglueck(2, 0, 10000), 0.5, tolerance = 0.05)
})
    
# Aufgabe 3.5

# Daten einlesen und unsere Gruppe heraus filtern
bike_sharing_data <- read.csv("bike_sharing_data_(with_NAs).csv")
bike_sharing_Data_Gruppe92<- data.frame(subset(bike_sharing_data, group == 92))

#  Fehlende Werte prüfen 

print(colSums(is.na(bike_sharing_Data_Gruppe92)))

# Spalten identifizieren
numeric_cols <- sapply(bike_sharing_Data_Gruppe92, is.numeric)

# Fehlende Werte in numerischen Spalten mit Mittelwert auffüllen
bike_sharing_Data_Gruppe92[, numeric_cols] <- lapply(bike_sharing_Data_Gruppe92[, numeric_cols], function(col) {
  ifelse(is.na(col), mean(col, na.rm = TRUE), col)
})

# Temperatur von Fahrenheit in Celsius umwandeln

temperatur <- c("min_temperature", "average_temperature", "max_temperature")
if (all(temperatur %in% colnames(bike_sharing_Data_Gruppe92))) {
  bike_sharing_Data_Gruppe92[temperatur] <- lapply(bike_sharing_Data_Gruppe92[temperatur], function(temp) {
    (temp - 32) * 5 / 9
  })
}
# nun müssen die Werte die keinen Sinn machen rausgefiltert werden
bike_sharing_Data_Gruppe92 <- subset(bike_sharing_Data_Gruppe92, windspeed >= 0 &
                        min_temperature >= -20 & min_temperature <= 50 &
                          average_temperature >= -30 & average_temperature <= 50 &
                          max_temperature >= -30 & max_temperature <= 50 &
                          count >= 0,  precipitation >= 1)

bike_sharing_Data_Gruppe92$date <- as.Date(bike_sharing_Data_Gruppe92$date)
bike_sharing_Data_Gruppe92$month <- format(bike_sharing_Data_Gruppe92$date, "day_of_year-da_of_week")

# Jetzt noch den Monat mit den meisten ausleihen berechnen

Zähler_zum_Monatlichen_Ausleihen <- aggregate(count ~ month, data = bike_sharing_Data_Gruppe92, sum)
max_month <- Zähler_zum_Monatlichen_Ausleihen[which.max(Zähler_zum_Monatlichen_Ausleihen$count), ]

max_month 
  

